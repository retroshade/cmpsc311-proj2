I - Names
=======================================================================================
Ryan Mysliwiec		rwm5592
Hayley Sundra		hms5333
=======================================================================================

II - Description
=======================================================================================
wordc-mp.c 

The main program, wordc-mp, is used to read a file. The program then takes the file and 
breaks it up into n number of sections (determined by the user at runtime). The program 
then creates a pipe, along with (n - 1) child processes. Each of these processes, along 
with the parent process, will run it's own mini-sort. This is a sort of the subset of 
words in each section. After counting and sorting all the words within the mini-sort, 
the child processes will pipe back into the parent process. The parent process will take
all of these inputs from the pipes and sort them back in with its own mini-sort and 
adding the amounts of each word from each child process to the amount in its own 
mini-sort, creating one large sorted and counted file.

wordc-mp.h 

This file contains all of the library files needed, along with any and all function 
prototypes. In the file, the list list struct is defined, which contains elements for 
each word, the amount of instances of that word. The file also defines a boolean type 
that is used when searching through the linked list to see if there is already an 
instance of any particular word within that list.
=======================================================================================

III - Difficulties, etc.
=======================================================================================
One of the hardest things, which we could have expected, was creating and using the 
pipes. This difficulty mainly arose because we have never used them before. We also ran 
into som trouble when piping the final word of the text file back into the parent 
process. When we initially ran the tests, the last word was being counted a seemingly
random amount of extra times. At one point, the last word was being "sorted" and 
counted 5 extra times. Another, 6 extra times. 

As stated below, when running the program for Arabian Nights, using 2 or 4 processes,
it took an absurdly long time; to the point where even after a few minutes, the parent 
still waiing for the child processes to finish doing their mini sort. Because of this,
there is no relevant data for the time it took for 2 and 4 processes. owever, anything 
over 8 processes, finished in anwhere from 5 seconds for 10 processes to 9 seconds
for 100 processes. 
=======================================================================================

IV - System Calls and Library Functions
=======================================================================================
malloc(), close(), fopen(), getpid(), fork(), read(), write(), clock(), atoi(), 
perror(), fgetc(), isalpha(), tolower(), printf(), pipe(), rewind(), exit(), fclose(),
strcmp(), fprintf()
=======================================================================================

V - Design Choices
=======================================================================================
We decided that we would keep the linked list, since it made the most sense in terms of 
implementation. We also opted to break the adding of elements to the linked list into 
multiple different functions, in order to account for the first elemnt in the list, any 
element throughout the list, and the final element. We decided to implement the file 
descriptors as 2D arrays. This allowed us to have a specific set for each child.
=======================================================================================

VI - Performance Results
=======================================================================================
Poject 1 Times
---------------------------------------------------------------------------------------
Pangur Ban

1.Execution Time: 0.030000 seconds
2.Execution Time: 0.030000 seconds
3.Execution Time: 0.030000 seconds
4.Execution Time: 0.030000 seconds
5.Execution Time: 0.030000 seconds
6.Execution Time: 0.030000 seconds
7.Execution Time: 0.030000 seconds
8.Execution Time: 0.030000 seconds
9.Execution Time: 0.030000 seconds
10.Execution Time: 0.030000 seconds
11.Execution Time: 0.030000 seconds
12.Execution Time: 0.030000 seconds
13.Execution Time: 0.030000 seconds
14.Execution Time: 0.030000 seconds
15.Execution Time: 0.040000 seconds
16.Execution Time: 0.030000 seconds
17.Execution Time: 0.030000 seconds
18.Execution Time: 0.040000 seconds
19.Execution Time: 0.030000 seconds
20.Execution Time: 0.030000 seconds

Mean - 0.031 seconds
Standard Deviation - 0.00308 seconds

Hamlet

1.Execution Time: 1.100000 seconds
2.Execution Time: 1.110000 seconds
3.Execution Time: 1.120000 seconds
4.Execution Time: 1.110000 seconds
5.Execution Time: 1.120000 seconds
6.Execution Time: 1.110000 seconds
7.Execution Time: 1.110000 seconds
8.Execution Time: 1.120000 seconds
9.Execution Time: 1.110000 seconds
10.Execution Time: 1.120000 seconds
11.Execution Time: 1.110000 seconds
12.Execution Time: 1.120000 seconds
13.Execution Time: 1.160000 seconds
14.Execution Time: 1.120000 seconds
15.Execution Time: 1.110000 seconds
16.Execution Time: 1.130000 seconds
17.Execution Time: 1.120000 seconds
18.Execution Time: 1.120000 seconds
19.Execution Time: 1.110000 seconds
20.Execution Time: 1.110000 second

Mean - 1.117 seconds
Standard Deviation - 0.01218 seconds

Arabian Nights

1.Execution Time: 47.850000 seconds
2.Execution Time: 47.500000 seconds
3.Execution Time: 47.630000 seconds
4.Execution Time: 47.290000 seconds
5.Execution Time: 47.880000 seconds
6.Execution Time: 47.240000 seconds
7.Execution Time: 47.360000 seconds
8.Execution Time: 47.550000 seconds
9.Execution Time: 47.140000 seconds
10.Execution Time: 47.450000 seconds
11.Execution Time: 47.320000 seconds
12.Execution Time: 48.010000 seconds
13.Execution Time: 47.490000 seconds
14.Execution Time: 47.210000 seconds
15.Execution Time: 47.870000 seconds
16.Execution Time: 47.680000 seconds
17.Execution Time: 45.690000 seconds
18.Execution Time: 47.170000 seconds
19.Execution Time: 48.390000 seconds
20.Execution Time: 48.020000 seconds

Mean - 47.487 seconds
Standard Deviation - 0.53997 seconds

---------------------------------------------------------------------------------------
Poject 2 Times
---------------------------------------------------------------------------------------
Pangur Ban

2 Processes

Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds


Mean - 0.0 seconds
Standard Deviation - 0.0 seconds

****This is because our type (double and long double) were not sufficient in recording 
the miniscule amount of time it took to complete the sort and count. The amount of 
ime was very small, so the output looks like 0.0000000 seconds****

4 Processes

Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds


Mean - 0.0 seconds
Standard Deviation - 0.0 seconds

****This is because our type (double and long double) were not sufficient in recording 
the miniscule amount of time it took to complete the sort and count. The amount of 
ime was very small, so the output looks like 0.0000000 seconds****

8 Processes

Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds
Execution Time: 0.000000 seconds


Mean - 0.0 seconds
Standard Deviation - 0.0 seconds

****This is because our type (double and long double) were not sufficient in recording 
the miniscule amount of time it took to complete the sort and count. The amount of 
ime was very small, so the output looks like 0.0000000 seconds****

Hamlet

2 Processes

Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.490000 seconds
Execution Time: 0.470000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.470000 seconds
Execution Time: 0.470000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.490000 seconds
Execution Time: 0.470000 seconds
Execution Time: 0.480000 seconds
Execution Time: 0.470000 seconds
Execution Time: 0.490000 seconds

Mean - 0.4785 seconds
Standard Deviation - 0.00587 seconds

4 Processes

Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.340000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds

Mean - 0.3295 seconds
Standard Deviation - 0.00394 seconds

8 Processes

Execution Time: 0.330000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.320000 seconds
Execution Time: 0.330000 seconds
Execution Time: 0.320000 seconds

Mean - 0.323 seconds
Standard Deviation - 0.0047 seconds

Arabian Nights

2 Processes

N/A

Our program works perfectly fine for the smaller files. However, when running the 
program to Arabian Nights with 2 processes, the single child process took several 
minutes, and the parent was waiting for that long. This led to a hangup (non-fatal)
that we could gain no useful information from. The program runs extremely slowly
when using a small amount of processes. However, when we ran the program with 10 
processes, the program inished successfully in only 5.82 seconds.

This was almost certainly due to our implementation, although we don't exactly know why.

Mean - N/A
Standard Deviation - N/A

4 Processes

N/A

Our program works perfectly fine for the smaller files. However, when running the 
program to Arabian Nights with 2 processes, the single child process took several 
minutes, and the parent was waiting for that long. This led to a hangup (non-fatal)
that we could gain no useful information from. The program runs extremely slowly
when using a small amount of processes. However, when we ran the program with 10 
processes, the program inished successfully in only 5.82 seconds.

This was almost certainly due to our implementation, although we don't exactly know why.

Mean - N/A
Standard Deviation - N/A

8 Processes

Execution Time: 6.040000 seconds
Execution Time: 5.990000 seconds
Execution Time: 6.060000 seconds
Execution Time: 5.970000 seconds
Execution Time: 5.920000 seconds
Execution Time: 5.970000 seconds
Execution Time: 6.030000 seconds
Execution Time: 6.010000 seconds
Execution Time: 5.990000 seconds
Execution Time: 5.910000 seconds
Execution Time: 5.980000 seconds
Execution Time: 5.980000 seconds
Execution Time: 5.930000 seconds
Execution Time: 6.000000 seconds
Execution Time: 6.020000 seconds
Execution Time: 6.010000 seconds
Execution Time: 5.960000 seconds
Execution Time: 5.900000 seconds
Execution Time: 5.920000 seconds
Execution Time: 5.990000 seconds

Mean - 5.979 seconds
Standard Deviation - 0.04483 seconds

When running the program to sort an extremely large file with multiple processes, 
a large amount of processes are needed, or the program will run significantly slower 
than the program from the first project.

---------------------------------------------------------------------------------------
=======================================================================================

****The program failed the unit tests. We are not sure as to why this happened, but 
the program outputs correctly every time****
